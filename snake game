

#Alex Pacheco 21122927. AP
#Gavin Savage 21146953. GS
#Ilkhom Mukhtorov 21129116. IM
#Alex Osborne 21128063. AO

#AP imports randrange function to allow generation of random numbers
from random import randrange
#AP imports functions from turtle for graphical purchases
from turtle import update, clear, ontimer, setup, hideturtle, tracer, listen, done
#AP import square and vector functions. Vector is used for aiming and initializing locations. Square is used to generate images
from freegames import square, vector
#AO import keyboard module
#Reference: https://stackoverflow.com/questions/24072790/how-to-detect-key-presses
import keyboard

#AP Initializes food location in the center of the screen
food = vector(0, 0)
#AP Initializes snake location, just to side of food
snake = [vector(10, 0)]
#AP Initializes direction in which snake is heading (negative y direction)
aim = vector(0, -10)

#AP Function changes direction in which snake is aiming
def change(x, y):
    """Change snake direction."""
    #AP Changes x value of aim to new x
    aim.x = x
    #AP Changes y value of aim to new y
    aim.y = y

#AP Function checks if head is within game board
def inside(head):
    """Return True if head inside boundaries."""
    #AP Check if head is within boundaries in x and y directions
    return -200 < head.x < 190 and -200 < head.y < 190

def controlSnake():
    #AO User input for snake using arrows or 'wasd'
    if keyboard.is_pressed("d") or keyboard.is_pressed("right arrow"):
        if len(snake) == 1:
            change(10,0)
        else:
            if aim != vector(-10,0):
                change(10,0)
            
    if keyboard.is_pressed("a") or keyboard.is_pressed("left arrow"):
        if len(snake) == 1:
            change(-10,0)
        else:
            if aim != vector(10,0):
                change(-10,0)

    if keyboard.is_pressed("w") or keyboard.is_pressed("up arrow"):
        if len(snake) == 1:
            change(0,10)
        else:    
            if aim != vector(0,-10):
                change(0,10)
    
    if keyboard.is_pressed("s") or keyboard.is_pressed("down arrow"):
        if len(snake) == 1:
            change(0,-10)
        else:    
            if aim != vector(0,10):
                change(0,-10)

#AP Function controls movement of snake
def move():
    """Move snake forward one segment."""
    head = snake[-1].copy() #AP Set the end of the snake as the location of the Head
    head.move(aim) #AP move the head in the direction the snake is aiming

    #AP Check if head is at the boundaries or collides with the snake
    if not inside(head) or head in snake:
        #AP generate a red square at the point of impact
        square(head.x, head.y, 9, 'red')
        #AP Update the graphics on screen
        update()
        #AP Exits function (No more movement)
        return

    #AP update the head position (End of the snake's body)
    snake.append(head)

    #AP Check if the user has "eaten" The food
    if head == food:
        #AP print statement showing length of snake
        print('Snake:', len(snake))
        #AP generate new X position of food
        food.x = randrange(-15, 15) * 10
        #AP generate new Y position food
        food.y = randrange(-15, 15) * 10
    else:
        #AP Remove end ("butt") of snake to account for the addition of the square at the "head"
        snake.pop(0)

    #AP clear screen for the next frame
    clear()

    #AP draws each square segment of the snakes body
    for body in snake:
        square(body.x, body.y, 9, 'black')

    #AP Draws the food
    square(food.x, food.y, 9, 'green')

    #AP updates the graphics with the squares drawn in the last three lines
    update()
    #AP calls the move timer every 100 milliseconds
    ontimer(move, 100)

#AP Set size and position of new window
setup(420, 420, 370, 0)
#AP hides "turtle" cursor and its tracer
hideturtle()
tracer(False)
#AP listen() allows tracking of events within the turtle screen
listen()
#AP begins the movement of the snake (Starts the game)
move()
#AP Stop Excecution of Turtle graphics
done()
